
velo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000008e8  0000097c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080015e  0080015e  000009da  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000022b  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000775  00000000  00000000  00001383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000221  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006ab  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002dc  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001e9  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000004f  00000000  00000000  000029a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_1>
   8:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e5       	ldi	r26, 0x5E	; 94
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 38       	cpi	r26, 0x86	; 134
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
  9e:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <push_bit>:
};

u16 last_indicator_state = 0;

void push_bit(u8 bit) {
	if (bit) {
  a6:	88 23       	and	r24, r24
  a8:	11 f0       	breq	.+4      	; 0xae <push_bit+0x8>
		bit_on(DATA);
  aa:	5f 9a       	sbi	0x0b, 7	; 11
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <push_bit+0xa>
	} else {
		bit_off(DATA);
  ae:	5f 98       	cbi	0x0b, 7	; 11
	}

	bit_off(CLK);
  b0:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	8a 95       	dec	r24
  b6:	f1 f7       	brne	.-4      	; 0xb4 <push_bit+0xe>
  b8:	00 00       	nop
	_delay_us(2);
	bit_on(CLK);
  ba:	5d 9a       	sbi	0x0b, 5	; 11
}
  bc:	08 95       	ret

000000be <push_byte>:

/* do not use - use push_triplet or push_number */
void push_byte(u8 byte) {
  be:	1f 93       	push	r17
  c0:	18 2f       	mov	r17, r24
	push_bit(byte & 0x80);
  c2:	80 78       	andi	r24, 0x80	; 128
  c4:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x40);
  c8:	81 2f       	mov	r24, r17
  ca:	80 74       	andi	r24, 0x40	; 64
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x20);
  d0:	81 2f       	mov	r24, r17
  d2:	80 72       	andi	r24, 0x20	; 32
  d4:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x10);
  d8:	81 2f       	mov	r24, r17
  da:	80 71       	andi	r24, 0x10	; 16
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x8);
  e0:	81 2f       	mov	r24, r17
  e2:	88 70       	andi	r24, 0x08	; 8
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x4);
  e8:	81 2f       	mov	r24, r17
  ea:	84 70       	andi	r24, 0x04	; 4
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x2);
  f0:	81 2f       	mov	r24, r17
  f2:	82 70       	andi	r24, 0x02	; 2
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
	push_bit(byte & 0x1);
  f8:	81 2f       	mov	r24, r17
  fa:	81 70       	andi	r24, 0x01	; 1
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <push_bit>
}
 100:	1f 91       	pop	r17
 102:	08 95       	ret

00000104 <reset_sreg>:

void reset_sreg() {
	bit_off(RST);
 104:	5e 98       	cbi	0x0b, 6	; 11
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <reset_sreg+0x4>
	_delay_us(3);
	bit_on(RST);
 10c:	5e 9a       	sbi	0x0b, 6	; 11
}
 10e:	08 95       	ret

00000110 <push_triplet>:

void push_triplet(u8 first, u8 second, u8 third) {
 110:	1f 93       	push	r17
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <push_triplet+0x8>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	18 2f       	mov	r17, r24
	reset_sreg();
 11e:	6a 83       	std	Y+2, r22	; 0x02
 120:	49 83       	std	Y+1, r20	; 0x01
 122:	0e 94 82 00 	call	0x104	; 0x104 <reset_sreg>
	push_byte(third);
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	push_byte(second);
 12c:	6a 81       	ldd	r22, Y+2	; 0x02
 12e:	86 2f       	mov	r24, r22
 130:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	push_byte(first);
 134:	81 2f       	mov	r24, r17
 136:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
}
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	cf 91       	pop	r28
 140:	df 91       	pop	r29
 142:	1f 91       	pop	r17
 144:	08 95       	ret

00000146 <push_number>:

void push_number(u16 number) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	8c 01       	movw	r16, r24
	reset_sreg();
 150:	0e 94 82 00 	call	0x104	; 0x104 <reset_sreg>
	push_byte(digit3[number % 10]);
 154:	ca e0       	ldi	r28, 0x0A	; 10
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	c8 01       	movw	r24, r16
 15a:	be 01       	movw	r22, r28
 15c:	0e 94 3c 04 	call	0x878	; 0x878 <__udivmodhi4>
 160:	8b 01       	movw	r16, r22
 162:	fc 01       	movw	r30, r24
 164:	e4 5c       	subi	r30, 0xC4	; 196
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	80 81       	ld	r24, Z
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	number /= 10;
	push_byte(digit2[number % 10]);
 16e:	c8 01       	movw	r24, r16
 170:	be 01       	movw	r22, r28
 172:	0e 94 3c 04 	call	0x878	; 0x878 <__udivmodhi4>
 176:	8b 01       	movw	r16, r22
 178:	fc 01       	movw	r30, r24
 17a:	e2 5e       	subi	r30, 0xE2	; 226
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	80 81       	ld	r24, Z
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	number /= 10;
	push_byte(digit1[number % 10]);
 184:	c8 01       	movw	r24, r16
 186:	be 01       	movw	r22, r28
 188:	0e 94 3c 04 	call	0x878	; 0x878 <__udivmodhi4>
 18c:	80 50       	subi	r24, 0x00	; 0
 18e:	9f 4f       	sbci	r25, 0xFF	; 255
 190:	fc 01       	movw	r30, r24
 192:	80 81       	ld	r24, Z
 194:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	last_indicator_state = number;
 198:	10 93 5f 01 	sts	0x015F, r17
 19c:	00 93 5e 01 	sts	0x015E, r16
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <push_single_char>:

void push_single_char(char ch) {
 1aa:	1f 93       	push	r17
 1ac:	18 2f       	mov	r17, r24
	reset_sreg();
 1ae:	0e 94 82 00 	call	0x104	; 0x104 <reset_sreg>
	push_byte(0);
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	push_byte(0);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	if (ch == 's' || ch == 'S') {
 1be:	13 37       	cpi	r17, 0x73	; 115
 1c0:	11 f0       	breq	.+4      	; 0x1c6 <push_single_char+0x1c>
 1c2:	13 35       	cpi	r17, 0x53	; 83
 1c4:	19 f4       	brne	.+6      	; 0x1cc <push_single_char+0x22>
		push_byte(digit1[11]);
 1c6:	80 91 0b 01 	lds	r24, 0x010B
 1ca:	06 c0       	rjmp	.+12     	; 0x1d8 <push_single_char+0x2e>
	} else if (ch == 'l' || ch == 'L') {
 1cc:	1c 36       	cpi	r17, 0x6C	; 108
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <push_single_char+0x2a>
 1d0:	1c 34       	cpi	r17, 0x4C	; 76
 1d2:	21 f4       	brne	.+8      	; 0x1dc <push_single_char+0x32>
		push_byte(digit1[12]);
 1d4:	80 91 0c 01 	lds	r24, 0x010C
 1d8:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	}	
}
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <push_three_chars>:

// c1 - left, c2 - middle, c3 - right position
void push_three_chars(char c1, char c2, char c3) {
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
	push_triplet(digit1[c1 - 86], digit2[c2 - 86], digit3[c3 - 87]);
 1e4:	c8 2f       	mov	r28, r24
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	c6 55       	subi	r28, 0x56	; 86
 1ea:	df 4f       	sbci	r29, 0xFF	; 255
 1ec:	a6 2f       	mov	r26, r22
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	a8 53       	subi	r26, 0x38	; 56
 1f2:	bf 4f       	sbci	r27, 0xFF	; 255
 1f4:	e4 2f       	mov	r30, r20
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	eb 51       	subi	r30, 0x1B	; 27
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	88 81       	ld	r24, Y
 1fe:	6c 91       	ld	r22, X
 200:	40 81       	ld	r20, Z
 202:	0e 94 88 00 	call	0x110	; 0x110 <push_triplet>
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <init_indicator>:

void init_indicator() {
	CTLPORTDDR |= (1 << CLK) | (1 << DATA) | (1 << RST ) | (1 << ON);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 6f       	ori	r24, 0xF0	; 240
 210:	8a b9       	out	0x0a, r24	; 10
	//CTLPORT &= (~(1 << CLK)) & (~(1 << DATA)) & (~(1 << RST)) & (~(1 << ON));
	CTLPORT = 0;
 212:	1b b8       	out	0x0b, r1	; 11
}
 214:	08 95       	ret

00000216 <indicator_on>:

void indicator_on() {
	push_number(last_indicator_state);
 216:	80 91 5e 01 	lds	r24, 0x015E
 21a:	90 91 5f 01 	lds	r25, 0x015F
 21e:	0e 94 a3 00 	call	0x146	; 0x146 <push_number>
}
 222:	08 95       	ret

00000224 <indicator_off>:

void indicator_off() {
	push_byte(0);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	push_byte(0);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
	push_byte(0);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 5f 00 	call	0xbe	; 0xbe <push_byte>
}
 236:	08 95       	ret

00000238 <__vector_1>:
		}

volatile u32 wheel_ticks = 0;
volatile u32 time_int0 = 0; // time of last rising edge on INT0
/* magnet */
ISR(INT0_vect) {
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
 256:	af 93       	push	r26
 258:	bf 93       	push	r27
	BUTTON_INTERRUPT_HANDLER(time_int0, NOISE_TICKS_MAG, EVENT_MAG, PD2);	
 25a:	80 91 61 01 	lds	r24, 0x0161
 25e:	90 91 62 01 	lds	r25, 0x0162
 262:	a0 91 63 01 	lds	r26, 0x0163
 266:	b0 91 64 01 	lds	r27, 0x0164
 26a:	4a 99       	sbic	0x09, 2	; 9
 26c:	1b c0       	rjmp	.+54     	; 0x2a4 <__vector_1+0x6c>
 26e:	20 91 76 01 	lds	r18, 0x0176
 272:	30 91 77 01 	lds	r19, 0x0177
 276:	40 91 78 01 	lds	r20, 0x0178
 27a:	50 91 79 01 	lds	r21, 0x0179
 27e:	7c 01       	movw	r14, r24
 280:	8d 01       	movw	r16, r26
 282:	e2 1a       	sub	r14, r18
 284:	f3 0a       	sbc	r15, r19
 286:	04 0b       	sbc	r16, r20
 288:	15 0b       	sbc	r17, r21
 28a:	a8 01       	movw	r20, r16
 28c:	97 01       	movw	r18, r14
 28e:	2a 30       	cpi	r18, 0x0A	; 10
 290:	31 05       	cpc	r19, r1
 292:	41 05       	cpc	r20, r1
 294:	51 05       	cpc	r21, r1
 296:	30 f0       	brcs	.+12     	; 0x2a4 <__vector_1+0x6c>
 298:	80 91 60 01 	lds	r24, 0x0160
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	80 93 60 01 	sts	0x0160, r24
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <__vector_1+0x7c>
 2a4:	80 93 76 01 	sts	0x0176, r24
 2a8:	90 93 77 01 	sts	0x0177, r25
 2ac:	a0 93 78 01 	sts	0x0178, r26
 2b0:	b0 93 79 01 	sts	0x0179, r27
	if (events & EVENT_MAG)
 2b4:	80 91 60 01 	lds	r24, 0x0160
 2b8:	80 ff       	sbrs	r24, 0
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <__vector_1+0xaa>
		++wheel_ticks;
 2bc:	80 91 72 01 	lds	r24, 0x0172
 2c0:	90 91 73 01 	lds	r25, 0x0173
 2c4:	a0 91 74 01 	lds	r26, 0x0174
 2c8:	b0 91 75 01 	lds	r27, 0x0175
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	a1 1d       	adc	r26, r1
 2d0:	b1 1d       	adc	r27, r1
 2d2:	80 93 72 01 	sts	0x0172, r24
 2d6:	90 93 73 01 	sts	0x0173, r25
 2da:	a0 93 74 01 	sts	0x0174, r26
 2de:	b0 93 75 01 	sts	0x0175, r27
}
 2e2:	bf 91       	pop	r27
 2e4:	af 91       	pop	r26
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_2>:

volatile u32 time_int1 = 0; // time of last rising edge on INT1
/* 'show' button */
ISR(INT1_vect) {
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
	BUTTON_INTERRUPT_HANDLER(time_int1, NOISE_TICKS_BTN, EVENT_BTN, PD3);
 326:	80 91 61 01 	lds	r24, 0x0161
 32a:	90 91 62 01 	lds	r25, 0x0162
 32e:	a0 91 63 01 	lds	r26, 0x0163
 332:	b0 91 64 01 	lds	r27, 0x0164
 336:	4b 99       	sbic	0x09, 3	; 9
 338:	1b c0       	rjmp	.+54     	; 0x370 <__vector_2+0x6c>
 33a:	20 91 7a 01 	lds	r18, 0x017A
 33e:	30 91 7b 01 	lds	r19, 0x017B
 342:	40 91 7c 01 	lds	r20, 0x017C
 346:	50 91 7d 01 	lds	r21, 0x017D
 34a:	7c 01       	movw	r14, r24
 34c:	8d 01       	movw	r16, r26
 34e:	e2 1a       	sub	r14, r18
 350:	f3 0a       	sbc	r15, r19
 352:	04 0b       	sbc	r16, r20
 354:	15 0b       	sbc	r17, r21
 356:	a8 01       	movw	r20, r16
 358:	97 01       	movw	r18, r14
 35a:	2a 30       	cpi	r18, 0x0A	; 10
 35c:	31 05       	cpc	r19, r1
 35e:	41 05       	cpc	r20, r1
 360:	51 05       	cpc	r21, r1
 362:	30 f0       	brcs	.+12     	; 0x370 <__vector_2+0x6c>
 364:	80 91 60 01 	lds	r24, 0x0160
 368:	82 60       	ori	r24, 0x02	; 2
 36a:	80 93 60 01 	sts	0x0160, r24
 36e:	08 c0       	rjmp	.+16     	; 0x380 <__vector_2+0x7c>
 370:	80 93 7a 01 	sts	0x017A, r24
 374:	90 93 7b 01 	sts	0x017B, r25
 378:	a0 93 7c 01 	sts	0x017C, r26
 37c:	b0 93 7d 01 	sts	0x017D, r27
}
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <__vector_9>:

ISR(TIMER2_OVF_vect) {
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
	time_ticks++;
 3b4:	80 91 61 01 	lds	r24, 0x0161
 3b8:	90 91 62 01 	lds	r25, 0x0162
 3bc:	a0 91 63 01 	lds	r26, 0x0163
 3c0:	b0 91 64 01 	lds	r27, 0x0164
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	a1 1d       	adc	r26, r1
 3c8:	b1 1d       	adc	r27, r1
 3ca:	80 93 61 01 	sts	0x0161, r24
 3ce:	90 93 62 01 	sts	0x0162, r25
 3d2:	a0 93 63 01 	sts	0x0163, r26
 3d6:	b0 93 64 01 	sts	0x0164, r27
	TCNT2 = 0;
 3da:	10 92 b2 00 	sts	0x00B2, r1
}
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <init_MCU>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	8f e5       	ldi	r24, 0x5F	; 95
 3f2:	9a ee       	ldi	r25, 0xEA	; 234
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <init_MCU+0x4>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <init_MCU+0xa>
 3fa:	00 00       	nop
 3fc:	8f e5       	ldi	r24, 0x5F	; 95
 3fe:	9a ee       	ldi	r25, 0xEA	; 234
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <init_MCU+0x10>
 404:	00 c0       	rjmp	.+0      	; 0x406 <init_MCU+0x16>
 406:	00 00       	nop
	/* set up asynchronous timer */
	int i;
	for (i = 0; i < 2; ++i) /* wait for oscillator start */ 
		_delay_ms(30);
		
	TCCR2A = 0;
 408:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B |= (1 << CS20);	/* overflow time: 1/128s (no prescaler) */
 40c:	e1 eb       	ldi	r30, 0xB1	; 177
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	81 60       	ori	r24, 0x01	; 1
 414:	80 83       	st	Z, r24
	TCNT2 = 0;				/* reset counter value */
 416:	10 92 b2 00 	sts	0x00B2, r1
	ASSR |= (1 << AS2);		/* enable async mode */
 41a:	e6 eb       	ldi	r30, 0xB6	; 182
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	80 62       	ori	r24, 0x20	; 32
 422:	80 83       	st	Z, r24
	TIMSK2 |= (1 << TOIE2); /* enable interrupt on overflow */
 424:	e0 e7       	ldi	r30, 0x70	; 112
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	80 83       	st	Z, r24
	
	/* set up I/O ports */
	DDRD = 0x0;	 /* all inputs */
 42e:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xff; /* all outputs */
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	84 b9       	out	0x04, r24	; 4
	
	/* set up interrupts */
	EICRA |= (1 << ISC10) | (1 << ISC00); /* int0 & int1 requested on any level change */
 434:	e9 e6       	ldi	r30, 0x69	; 105
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	85 60       	ori	r24, 0x05	; 5
 43c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0) | (1 << INT1); /* enable int0 & int1 */
 43e:	8d b3       	in	r24, 0x1d	; 29
 440:	83 60       	ori	r24, 0x03	; 3
 442:	8d bb       	out	0x1d, r24	; 29
	sei();
 444:	78 94       	sei
}
 446:	08 95       	ret

00000448 <visualize_model>:
volatile u32 mshow_time = -1;
#define SHOWING_MODE (mshow_time != -1)
#define STOP_SHOWING_MODE() (mshow_time = -1)

void visualize_model() {
	if (LED_IS_OFF || SHOWING_MODE)
 448:	80 91 82 01 	lds	r24, 0x0182
 44c:	90 91 83 01 	lds	r25, 0x0183
 450:	a0 91 84 01 	lds	r26, 0x0184
 454:	b0 91 85 01 	lds	r27, 0x0185
 458:	8f 3f       	cpi	r24, 0xFF	; 255
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	92 07       	cpc	r25, r18
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	a2 07       	cpc	r26, r18
 462:	2f ef       	ldi	r18, 0xFF	; 255
 464:	b2 07       	cpc	r27, r18
 466:	49 f1       	breq	.+82     	; 0x4ba <visualize_model+0x72>
 468:	80 91 5a 01 	lds	r24, 0x015A
 46c:	90 91 5b 01 	lds	r25, 0x015B
 470:	a0 91 5c 01 	lds	r26, 0x015C
 474:	b0 91 5d 01 	lds	r27, 0x015D
 478:	8f 3f       	cpi	r24, 0xFF	; 255
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	92 07       	cpc	r25, r18
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	a2 07       	cpc	r26, r18
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	b2 07       	cpc	r27, r18
 486:	c9 f4       	brne	.+50     	; 0x4ba <visualize_model+0x72>
		return;
		
	switch (view_mode) {
 488:	80 91 71 01 	lds	r24, 0x0171
 48c:	88 23       	and	r24, r24
 48e:	59 f4       	brne	.+22     	; 0x4a6 <visualize_model+0x5e>
		case VIEW_MODE_LEN:
			//add_num_draw_task(metric_len & 0xffff, NEXT_TO, TIME_INF);
			push_number(metric_len & 0xffff);
 490:	80 91 7e 01 	lds	r24, 0x017E
 494:	90 91 7f 01 	lds	r25, 0x017F
 498:	a0 91 80 01 	lds	r26, 0x0180
 49c:	b0 91 81 01 	lds	r27, 0x0181
 4a0:	0e 94 a3 00 	call	0x146	; 0x146 <push_number>
			break;
 4a4:	08 95       	ret
		default:
			//add_num_draw_task(metric_speed & 0xffff, NEXT_TO, TIME_INF);
			push_number(metric_speed & 0xffff);
 4a6:	80 91 6d 01 	lds	r24, 0x016D
 4aa:	90 91 6e 01 	lds	r25, 0x016E
 4ae:	a0 91 6f 01 	lds	r26, 0x016F
 4b2:	b0 91 70 01 	lds	r27, 0x0170
 4b6:	0e 94 a3 00 	call	0x146	; 0x146 <push_number>
 4ba:	08 95       	ret

000004bc <show_mode>:
			break;
	}
}

void show_mode() {
	switch (view_mode) {
 4bc:	80 91 71 01 	lds	r24, 0x0171
 4c0:	88 23       	and	r24, r24
 4c2:	21 f4       	brne	.+8      	; 0x4cc <show_mode+0x10>
		case VIEW_MODE_LEN:
			//add_str_draw_task(str_mode_len, NEXT_TO, time_ms(300));
			push_three_chars('l', 'e', 'n');
 4c4:	8c e6       	ldi	r24, 0x6C	; 108
 4c6:	65 e6       	ldi	r22, 0x65	; 101
 4c8:	4e e6       	ldi	r20, 0x6E	; 110
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <show_mode+0x16>
			break;
		default:
			//add_str_draw_task(str_mode_spd, NEXT_TO, time_ms(300));
			push_three_chars('s', 'p', 'd');
 4cc:	83 e7       	ldi	r24, 0x73	; 115
 4ce:	60 e7       	ldi	r22, 0x70	; 112
 4d0:	44 e6       	ldi	r20, 0x64	; 100
 4d2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <push_three_chars>
			break;
	}
	mshow_time = time_ticks;
 4d6:	80 91 61 01 	lds	r24, 0x0161
 4da:	90 91 62 01 	lds	r25, 0x0162
 4de:	a0 91 63 01 	lds	r26, 0x0163
 4e2:	b0 91 64 01 	lds	r27, 0x0164
 4e6:	80 93 5a 01 	sts	0x015A, r24
 4ea:	90 93 5b 01 	sts	0x015B, r25
 4ee:	a0 93 5c 01 	sts	0x015C, r26
 4f2:	b0 93 5d 01 	sts	0x015D, r27
}
 4f6:	08 95       	ret

000004f8 <main>:

int main(void) {	
 4f8:	2f 92       	push	r2
 4fa:	3f 92       	push	r3
 4fc:	4f 92       	push	r4
 4fe:	5f 92       	push	r5
 500:	6f 92       	push	r6
 502:	7f 92       	push	r7
 504:	8f 92       	push	r8
 506:	9f 92       	push	r9
 508:	af 92       	push	r10
 50a:	bf 92       	push	r11
 50c:	cf 92       	push	r12
 50e:	df 92       	push	r13
 510:	ef 92       	push	r14
 512:	ff 92       	push	r15
 514:	0f 93       	push	r16
 516:	1f 93       	push	r17
	init_MCU();
 518:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <init_MCU>
	init_indicator();
 51c:	0e 94 06 01 	call	0x20c	; 0x20c <init_indicator>

	u32 old_metric_speed = metric_speed,
 520:	80 91 6d 01 	lds	r24, 0x016D
 524:	90 91 6e 01 	lds	r25, 0x016E
 528:	a0 91 6f 01 	lds	r26, 0x016F
 52c:	b0 91 70 01 	lds	r27, 0x0170
		old_metric_len	 = metric_len;
 530:	80 91 7e 01 	lds	r24, 0x017E
 534:	90 91 7f 01 	lds	r25, 0x017F
 538:	a0 91 80 01 	lds	r26, 0x0180
 53c:	b0 91 81 01 	lds	r27, 0x0181
	PORTB = MYCONST;
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	85 b9       	out	0x05, r24	; 5
	push_three_chars('h', 'e', 'l');
 544:	88 e6       	ldi	r24, 0x68	; 104
 546:	65 e6       	ldi	r22, 0x65	; 101
 548:	4c e6       	ldi	r20, 0x6C	; 108
 54a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <push_three_chars>
 54e:	8e e1       	ldi	r24, 0x1E	; 30
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	ef e6       	ldi	r30, 0x6F	; 111
 554:	f7 e1       	ldi	r31, 0x17	; 23
 556:	31 97       	sbiw	r30, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <main+0x5e>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0x64>
 55c:	00 00       	nop
 55e:	01 97       	sbiw	r24, 0x01	; 1
	int i;
	for (i = 0; i < 30; ++i) {
 560:	c1 f7       	brne	.-16     	; 0x552 <main+0x5a>
		_delay_ms(3);
	}
	show_mode();
 562:	0e 94 5e 02 	call	0x4bc	; 0x4bc <show_mode>
	mshow_time = time_ticks;	
 566:	80 91 61 01 	lds	r24, 0x0161
 56a:	90 91 62 01 	lds	r25, 0x0162
 56e:	a0 91 63 01 	lds	r26, 0x0163
 572:	b0 91 64 01 	lds	r27, 0x0164
 576:	80 93 5a 01 	sts	0x015A, r24
 57a:	90 93 5b 01 	sts	0x015B, r25
 57e:	a0 93 5c 01 	sts	0x015C, r26
 582:	b0 93 5d 01 	sts	0x015D, r27
			PORTB |= 2;*/
		
		if (SHOWING_MODE) {
			//PORTB ^= 0xff;
			if (time_ticks - mshow_time >= TIME_SHOWING_MODE) {
				STOP_SHOWING_MODE();
 586:	ee 24       	eor	r14, r14
 588:	ea 94       	dec	r14
 58a:	fe 2c       	mov	r15, r14
 58c:	87 01       	movw	r16, r14
volatile u32 metric_len = 0;
/* returns in [(1/10 of kilometer)] */
inline u32 wheel_ticks_to_metric() {
	/*  (26 inch * PI) is 2075 millimeters.
	  26 inch - diameter of wheel */
	return (wheel_ticks * 2075) / 100000;
 58e:	90 ea       	ldi	r25, 0xA0	; 160
 590:	69 2e       	mov	r6, r25
 592:	96 e8       	ldi	r25, 0x86	; 134
 594:	79 2e       	mov	r7, r25
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	89 2e       	mov	r8, r25
 59a:	91 2c       	mov	r9, r1
volatile u32 metric_speed = 0;

/* returns in [(1/10 of kilometer) per hour] */
inline u32 speed_to_metric() {
	/* Length of wheel * WHEELS_PER_TICK_MEASUREMENT * TICKS_PER_SECOND * 3600 / 1000 = 38246 */
	return 38246 / speed_measurement_time;
 59c:	86 e6       	ldi	r24, 0x66	; 102
 59e:	28 2e       	mov	r2, r24
 5a0:	85 e9       	ldi	r24, 0x95	; 149
 5a2:	38 2e       	mov	r3, r24
 5a4:	41 2c       	mov	r4, r1
 5a6:	51 2c       	mov	r5, r1
		/*if (time_ticks - mshow_time == 1000)
			PORTB |= 1;
		if (time_ticks - time_woke_up == 1000)
			PORTB |= 2;*/
		
		if (SHOWING_MODE) {
 5a8:	80 91 5a 01 	lds	r24, 0x015A
 5ac:	90 91 5b 01 	lds	r25, 0x015B
 5b0:	a0 91 5c 01 	lds	r26, 0x015C
 5b4:	b0 91 5d 01 	lds	r27, 0x015D
 5b8:	8f 3f       	cpi	r24, 0xFF	; 255
 5ba:	ff ef       	ldi	r31, 0xFF	; 255
 5bc:	9f 07       	cpc	r25, r31
 5be:	ff ef       	ldi	r31, 0xFF	; 255
 5c0:	af 07       	cpc	r26, r31
 5c2:	ff ef       	ldi	r31, 0xFF	; 255
 5c4:	bf 07       	cpc	r27, r31
 5c6:	31 f1       	breq	.+76     	; 0x614 <main+0x11c>
			//PORTB ^= 0xff;
			if (time_ticks - mshow_time >= TIME_SHOWING_MODE) {
 5c8:	80 91 61 01 	lds	r24, 0x0161
 5cc:	90 91 62 01 	lds	r25, 0x0162
 5d0:	a0 91 63 01 	lds	r26, 0x0163
 5d4:	b0 91 64 01 	lds	r27, 0x0164
 5d8:	20 91 5a 01 	lds	r18, 0x015A
 5dc:	30 91 5b 01 	lds	r19, 0x015B
 5e0:	40 91 5c 01 	lds	r20, 0x015C
 5e4:	50 91 5d 01 	lds	r21, 0x015D
 5e8:	82 1b       	sub	r24, r18
 5ea:	93 0b       	sbc	r25, r19
 5ec:	a4 0b       	sbc	r26, r20
 5ee:	b5 0b       	sbc	r27, r21
 5f0:	86 36       	cpi	r24, 0x66	; 102
 5f2:	91 05       	cpc	r25, r1
 5f4:	a1 05       	cpc	r26, r1
 5f6:	b1 05       	cpc	r27, r1
 5f8:	68 f0       	brcs	.+26     	; 0x614 <main+0x11c>
				STOP_SHOWING_MODE();
 5fa:	e0 92 5a 01 	sts	0x015A, r14
 5fe:	f0 92 5b 01 	sts	0x015B, r15
 602:	00 93 5c 01 	sts	0x015C, r16
 606:	10 93 5d 01 	sts	0x015D, r17
				//PORTB ^= 1;
				events |= EVENT_REDRAW;
 60a:	80 91 60 01 	lds	r24, 0x0160
 60e:	84 60       	ori	r24, 0x04	; 4
 610:	80 93 60 01 	sts	0x0160, r24
			}
		}
		
		if (LED_IS_ON) { // if indicator is on
 614:	80 91 82 01 	lds	r24, 0x0182
 618:	90 91 83 01 	lds	r25, 0x0183
 61c:	a0 91 84 01 	lds	r26, 0x0184
 620:	b0 91 85 01 	lds	r27, 0x0185
 624:	8f 3f       	cpi	r24, 0xFF	; 255
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	92 07       	cpc	r25, r18
 62a:	2f ef       	ldi	r18, 0xFF	; 255
 62c:	a2 07       	cpc	r26, r18
 62e:	2f ef       	ldi	r18, 0xFF	; 255
 630:	b2 07       	cpc	r27, r18
 632:	31 f1       	breq	.+76     	; 0x680 <main+0x188>
			if (time_ticks - time_woke_up >= TIME_AWAKE) {
 634:	80 91 61 01 	lds	r24, 0x0161
 638:	90 91 62 01 	lds	r25, 0x0162
 63c:	a0 91 63 01 	lds	r26, 0x0163
 640:	b0 91 64 01 	lds	r27, 0x0164
 644:	20 91 82 01 	lds	r18, 0x0182
 648:	30 91 83 01 	lds	r19, 0x0183
 64c:	40 91 84 01 	lds	r20, 0x0184
 650:	50 91 85 01 	lds	r21, 0x0185
 654:	82 1b       	sub	r24, r18
 656:	93 0b       	sbc	r25, r19
 658:	a4 0b       	sbc	r26, r20
 65a:	b5 0b       	sbc	r27, r21
 65c:	80 38       	cpi	r24, 0x80	; 128
 65e:	e2 e0       	ldi	r30, 0x02	; 2
 660:	9e 07       	cpc	r25, r30
 662:	e0 e0       	ldi	r30, 0x00	; 0
 664:	ae 07       	cpc	r26, r30
 666:	e0 e0       	ldi	r30, 0x00	; 0
 668:	be 07       	cpc	r27, r30
 66a:	50 f0       	brcs	.+20     	; 0x680 <main+0x188>
				LED_OFF();
 66c:	e0 92 82 01 	sts	0x0182, r14
 670:	f0 92 83 01 	sts	0x0183, r15
 674:	00 93 84 01 	sts	0x0184, r16
 678:	10 93 85 01 	sts	0x0185, r17
				indicator_off();
 67c:	0e 94 12 01 	call	0x224	; 0x224 <indicator_off>
			}
		}
	 
		/* queue processing */
		if (events & EVENT_MAG) {
 680:	80 91 60 01 	lds	r24, 0x0160
 684:	80 ff       	sbrs	r24, 0
 686:	97 c0       	rjmp	.+302    	; 0x7b6 <main+0x2be>
			events &= ~EVENT_MAG;
 688:	80 91 60 01 	lds	r24, 0x0160
 68c:	8e 7f       	andi	r24, 0xFE	; 254
 68e:	80 93 60 01 	sts	0x0160, r24
			
			old_metric_len = metric_len;
 692:	a0 90 7e 01 	lds	r10, 0x017E
 696:	b0 90 7f 01 	lds	r11, 0x017F
 69a:	c0 90 80 01 	lds	r12, 0x0180
 69e:	d0 90 81 01 	lds	r13, 0x0181
volatile u32 metric_len = 0;
/* returns in [(1/10 of kilometer)] */
inline u32 wheel_ticks_to_metric() {
	/*  (26 inch * PI) is 2075 millimeters.
	  26 inch - diameter of wheel */
	return (wheel_ticks * 2075) / 100000;
 6a2:	60 91 72 01 	lds	r22, 0x0172
 6a6:	70 91 73 01 	lds	r23, 0x0173
 6aa:	80 91 74 01 	lds	r24, 0x0174
 6ae:	90 91 75 01 	lds	r25, 0x0175
 6b2:	2b e1       	ldi	r18, 0x1B	; 27
 6b4:	38 e0       	ldi	r19, 0x08	; 8
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__mulsi3>
 6be:	a4 01       	movw	r20, r8
 6c0:	93 01       	movw	r18, r6
 6c2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__udivmodsi4>
		/* queue processing */
		if (events & EVENT_MAG) {
			events &= ~EVENT_MAG;
			
			old_metric_len = metric_len;
			metric_len = wheel_ticks_to_metric();
 6c6:	20 93 7e 01 	sts	0x017E, r18
 6ca:	30 93 7f 01 	sts	0x017F, r19
 6ce:	40 93 80 01 	sts	0x0180, r20
 6d2:	50 93 81 01 	sts	0x0181, r21
			
			if (metric_len != old_metric_len && view_mode == VIEW_MODE_LEN) 
 6d6:	80 91 7e 01 	lds	r24, 0x017E
 6da:	90 91 7f 01 	lds	r25, 0x017F
 6de:	a0 91 80 01 	lds	r26, 0x0180
 6e2:	b0 91 81 01 	lds	r27, 0x0181
 6e6:	8a 15       	cp	r24, r10
 6e8:	9b 05       	cpc	r25, r11
 6ea:	ac 05       	cpc	r26, r12
 6ec:	bd 05       	cpc	r27, r13
 6ee:	49 f0       	breq	.+18     	; 0x702 <main+0x20a>
 6f0:	80 91 71 01 	lds	r24, 0x0171
 6f4:	88 23       	and	r24, r24
 6f6:	29 f4       	brne	.+10     	; 0x702 <main+0x20a>
				events |= EVENT_REDRAW;		
 6f8:	80 91 60 01 	lds	r24, 0x0160
 6fc:	84 60       	ori	r24, 0x04	; 4
 6fe:	80 93 60 01 	sts	0x0160, r24
				
			if (wheel_ticks % WHEEL_TICKS_PER_SPEED_MEASUREMENT == 0) {
 702:	80 91 72 01 	lds	r24, 0x0172
 706:	90 91 73 01 	lds	r25, 0x0173
 70a:	a0 91 74 01 	lds	r26, 0x0174
 70e:	b0 91 75 01 	lds	r27, 0x0175
 712:	83 70       	andi	r24, 0x03	; 3
 714:	90 70       	andi	r25, 0x00	; 0
 716:	a0 70       	andi	r26, 0x00	; 0
 718:	b0 70       	andi	r27, 0x00	; 0
 71a:	00 97       	sbiw	r24, 0x00	; 0
 71c:	a1 05       	cpc	r26, r1
 71e:	b1 05       	cpc	r27, r1
 720:	09 f0       	breq	.+2      	; 0x724 <main+0x22c>
 722:	49 c0       	rjmp	.+146    	; 0x7b6 <main+0x2be>
				speed_measurement_time = time_ticks - last_speed_measurement_time;				
 724:	80 91 61 01 	lds	r24, 0x0161
 728:	90 91 62 01 	lds	r25, 0x0162
 72c:	a0 91 63 01 	lds	r26, 0x0163
 730:	b0 91 64 01 	lds	r27, 0x0164
 734:	20 91 69 01 	lds	r18, 0x0169
 738:	30 91 6a 01 	lds	r19, 0x016A
 73c:	40 91 6b 01 	lds	r20, 0x016B
 740:	50 91 6c 01 	lds	r21, 0x016C
 744:	82 1b       	sub	r24, r18
 746:	93 0b       	sbc	r25, r19
 748:	a4 0b       	sbc	r26, r20
 74a:	b5 0b       	sbc	r27, r21
 74c:	80 93 65 01 	sts	0x0165, r24
 750:	90 93 66 01 	sts	0x0166, r25
 754:	a0 93 67 01 	sts	0x0167, r26
 758:	b0 93 68 01 	sts	0x0168, r27
				last_speed_measurement_time = time_ticks;				
 75c:	80 91 61 01 	lds	r24, 0x0161
 760:	90 91 62 01 	lds	r25, 0x0162
 764:	a0 91 63 01 	lds	r26, 0x0163
 768:	b0 91 64 01 	lds	r27, 0x0164
 76c:	80 93 69 01 	sts	0x0169, r24
 770:	90 93 6a 01 	sts	0x016A, r25
 774:	a0 93 6b 01 	sts	0x016B, r26
 778:	b0 93 6c 01 	sts	0x016C, r27
volatile u32 metric_speed = 0;

/* returns in [(1/10 of kilometer) per hour] */
inline u32 speed_to_metric() {
	/* Length of wheel * WHEELS_PER_TICK_MEASUREMENT * TICKS_PER_SECOND * 3600 / 1000 = 38246 */
	return 38246 / speed_measurement_time;
 77c:	20 91 65 01 	lds	r18, 0x0165
 780:	30 91 66 01 	lds	r19, 0x0166
 784:	40 91 67 01 	lds	r20, 0x0167
 788:	50 91 68 01 	lds	r21, 0x0168
 78c:	c2 01       	movw	r24, r4
 78e:	b1 01       	movw	r22, r2
 790:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__udivmodsi4>
				events |= EVENT_REDRAW;		
				
			if (wheel_ticks % WHEEL_TICKS_PER_SPEED_MEASUREMENT == 0) {
				speed_measurement_time = time_ticks - last_speed_measurement_time;				
				last_speed_measurement_time = time_ticks;				
				metric_speed = speed_to_metric();
 794:	20 93 6d 01 	sts	0x016D, r18
 798:	30 93 6e 01 	sts	0x016E, r19
 79c:	40 93 6f 01 	sts	0x016F, r20
 7a0:	50 93 70 01 	sts	0x0170, r21
				//PORTB = metric_speed;
				if (view_mode == VIEW_MODE_SPD)
 7a4:	80 91 71 01 	lds	r24, 0x0171
 7a8:	81 30       	cpi	r24, 0x01	; 1
 7aa:	29 f4       	brne	.+10     	; 0x7b6 <main+0x2be>
					events |= EVENT_REDRAW;
 7ac:	80 91 60 01 	lds	r24, 0x0160
 7b0:	84 60       	ori	r24, 0x04	; 4
 7b2:	80 93 60 01 	sts	0x0160, r24
			}
		}

		if (events & EVENT_BTN) {
 7b6:	80 91 60 01 	lds	r24, 0x0160
 7ba:	81 ff       	sbrs	r24, 1
 7bc:	32 c0       	rjmp	.+100    	; 0x822 <main+0x32a>
			events &= ~EVENT_BTN;		
 7be:	80 91 60 01 	lds	r24, 0x0160
 7c2:	8d 7f       	andi	r24, 0xFD	; 253
 7c4:	80 93 60 01 	sts	0x0160, r24
						
			if (LED_IS_OFF)
 7c8:	80 91 82 01 	lds	r24, 0x0182
 7cc:	90 91 83 01 	lds	r25, 0x0183
 7d0:	a0 91 84 01 	lds	r26, 0x0184
 7d4:	b0 91 85 01 	lds	r27, 0x0185
 7d8:	8f 3f       	cpi	r24, 0xFF	; 255
 7da:	ff ef       	ldi	r31, 0xFF	; 255
 7dc:	9f 07       	cpc	r25, r31
 7de:	ff ef       	ldi	r31, 0xFF	; 255
 7e0:	af 07       	cpc	r26, r31
 7e2:	ff ef       	ldi	r31, 0xFF	; 255
 7e4:	bf 07       	cpc	r27, r31
 7e6:	19 f4       	brne	.+6      	; 0x7ee <main+0x2f6>
				indicator_on();
 7e8:	0e 94 0b 01 	call	0x216	; 0x216 <indicator_on>
 7ec:	08 c0       	rjmp	.+16     	; 0x7fe <main+0x306>
			else {
				next_view_mode();
 7ee:	80 91 71 01 	lds	r24, 0x0171
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	81 70       	andi	r24, 0x01	; 1
 7f8:	90 70       	andi	r25, 0x00	; 0
 7fa:	80 93 71 01 	sts	0x0171, r24
			}			
			show_mode();
 7fe:	0e 94 5e 02 	call	0x4bc	; 0x4bc <show_mode>
			LED_ON();
 802:	80 91 61 01 	lds	r24, 0x0161
 806:	90 91 62 01 	lds	r25, 0x0162
 80a:	a0 91 63 01 	lds	r26, 0x0163
 80e:	b0 91 64 01 	lds	r27, 0x0164
 812:	80 93 82 01 	sts	0x0182, r24
 816:	90 93 83 01 	sts	0x0183, r25
 81a:	a0 93 84 01 	sts	0x0184, r26
 81e:	b0 93 85 01 	sts	0x0185, r27
		}

		if (events & EVENT_REDRAW) {	
 822:	80 91 60 01 	lds	r24, 0x0160
 826:	82 ff       	sbrs	r24, 2
 828:	bf ce       	rjmp	.-642    	; 0x5a8 <main+0xb0>
			//PORTB ^= 1;	
			events &= ~EVENT_REDRAW;
 82a:	80 91 60 01 	lds	r24, 0x0160
 82e:	8b 7f       	andi	r24, 0xFB	; 251
 830:	80 93 60 01 	sts	0x0160, r24
			visualize_model();			
 834:	0e 94 24 02 	call	0x448	; 0x448 <visualize_model>
 838:	b7 ce       	rjmp	.-658    	; 0x5a8 <main+0xb0>

0000083a <__mulsi3>:
 83a:	62 9f       	mul	r22, r18
 83c:	d0 01       	movw	r26, r0
 83e:	73 9f       	mul	r23, r19
 840:	f0 01       	movw	r30, r0
 842:	82 9f       	mul	r24, r18
 844:	e0 0d       	add	r30, r0
 846:	f1 1d       	adc	r31, r1
 848:	64 9f       	mul	r22, r20
 84a:	e0 0d       	add	r30, r0
 84c:	f1 1d       	adc	r31, r1
 84e:	92 9f       	mul	r25, r18
 850:	f0 0d       	add	r31, r0
 852:	83 9f       	mul	r24, r19
 854:	f0 0d       	add	r31, r0
 856:	74 9f       	mul	r23, r20
 858:	f0 0d       	add	r31, r0
 85a:	65 9f       	mul	r22, r21
 85c:	f0 0d       	add	r31, r0
 85e:	99 27       	eor	r25, r25
 860:	72 9f       	mul	r23, r18
 862:	b0 0d       	add	r27, r0
 864:	e1 1d       	adc	r30, r1
 866:	f9 1f       	adc	r31, r25
 868:	63 9f       	mul	r22, r19
 86a:	b0 0d       	add	r27, r0
 86c:	e1 1d       	adc	r30, r1
 86e:	f9 1f       	adc	r31, r25
 870:	bd 01       	movw	r22, r26
 872:	cf 01       	movw	r24, r30
 874:	11 24       	eor	r1, r1
 876:	08 95       	ret

00000878 <__udivmodhi4>:
 878:	aa 1b       	sub	r26, r26
 87a:	bb 1b       	sub	r27, r27
 87c:	51 e1       	ldi	r21, 0x11	; 17
 87e:	07 c0       	rjmp	.+14     	; 0x88e <__udivmodhi4_ep>

00000880 <__udivmodhi4_loop>:
 880:	aa 1f       	adc	r26, r26
 882:	bb 1f       	adc	r27, r27
 884:	a6 17       	cp	r26, r22
 886:	b7 07       	cpc	r27, r23
 888:	10 f0       	brcs	.+4      	; 0x88e <__udivmodhi4_ep>
 88a:	a6 1b       	sub	r26, r22
 88c:	b7 0b       	sbc	r27, r23

0000088e <__udivmodhi4_ep>:
 88e:	88 1f       	adc	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	5a 95       	dec	r21
 894:	a9 f7       	brne	.-22     	; 0x880 <__udivmodhi4_loop>
 896:	80 95       	com	r24
 898:	90 95       	com	r25
 89a:	bc 01       	movw	r22, r24
 89c:	cd 01       	movw	r24, r26
 89e:	08 95       	ret

000008a0 <__udivmodsi4>:
 8a0:	a1 e2       	ldi	r26, 0x21	; 33
 8a2:	1a 2e       	mov	r1, r26
 8a4:	aa 1b       	sub	r26, r26
 8a6:	bb 1b       	sub	r27, r27
 8a8:	fd 01       	movw	r30, r26
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <__udivmodsi4_ep>

000008ac <__udivmodsi4_loop>:
 8ac:	aa 1f       	adc	r26, r26
 8ae:	bb 1f       	adc	r27, r27
 8b0:	ee 1f       	adc	r30, r30
 8b2:	ff 1f       	adc	r31, r31
 8b4:	a2 17       	cp	r26, r18
 8b6:	b3 07       	cpc	r27, r19
 8b8:	e4 07       	cpc	r30, r20
 8ba:	f5 07       	cpc	r31, r21
 8bc:	20 f0       	brcs	.+8      	; 0x8c6 <__udivmodsi4_ep>
 8be:	a2 1b       	sub	r26, r18
 8c0:	b3 0b       	sbc	r27, r19
 8c2:	e4 0b       	sbc	r30, r20
 8c4:	f5 0b       	sbc	r31, r21

000008c6 <__udivmodsi4_ep>:
 8c6:	66 1f       	adc	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	1a 94       	dec	r1
 8d0:	69 f7       	brne	.-38     	; 0x8ac <__udivmodsi4_loop>
 8d2:	60 95       	com	r22
 8d4:	70 95       	com	r23
 8d6:	80 95       	com	r24
 8d8:	90 95       	com	r25
 8da:	9b 01       	movw	r18, r22
 8dc:	ac 01       	movw	r20, r24
 8de:	bd 01       	movw	r22, r26
 8e0:	cf 01       	movw	r24, r30
 8e2:	08 95       	ret

000008e4 <_exit>:
 8e4:	f8 94       	cli

000008e6 <__stop_program>:
 8e6:	ff cf       	rjmp	.-2      	; 0x8e6 <__stop_program>
